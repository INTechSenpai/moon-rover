/* ============================================================================
 * 	                           Example Factory 
 * ============================================================================
 * 
 * Just an example of what can been done with AbstractFactory.
 * A, B, C, D, E, F, G, H, I, J, K, L, and M are random classes. 
 *
 * Author : Martial
 */

package factories;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

// ==================================================================================
// At the bottom of this file, you'll found an usage example for this example factory
// ==================================================================================


public class ExempleFactory extends AbstractFactory
{
	
    public ExempleFactory()
    {
    	// Crazy stuff arround here
    }

	// ===================  Cloning Learning methods ============================

	public boolean LearnToClone(FactoryProduct toLearn)
	{			
		// here A, B and C are the only ones to need a special treatment, in Make or MakeFromString
		// so you wanna reject them from the cloning mechanism
		// Please make sure you reject all classes that needs a special treatment
		// just check sucessively against each one
		if 			(toLearn instanceof A)	
			return false;
		else if 	(toLearn instanceof B)
			return false;
		else if 	(toLearn instanceof C)
			return false;
		if 			(toLearn instanceof D)	
			return false;
		else if 	(toLearn instanceof E)
			return false;
		else if 	(toLearn instanceof F)
			return false;
		else if 	(toLearn instanceof J)
			return false;
		else
		{
			// Here only valid types arrives, so we register them.
			RegisterNewProduct(toLearn);
			return true;
		}
	}

	// ===================  Capabilities methods ============================

	public boolean CanMake(Object toCheck)
	{			
		// here A, B and C needs special treatment and are hardcoded in Make
		// just check sucessively against each one
		if 			(toCheck instanceof A)	
			return true;
		else if 	(toCheck instanceof B)
			return true;
		else if 	(toCheck instanceof C)
			return true;
		else	
			return false;
	}
	
	public boolean CanMakeFromString(String className)
	{			
		// here D, E and F needs special treatment and are hardcoded in MakeFromString
		// just check sucessively against each one
		if 			(className == "D")	
			return true;
		else if 	(className == "E")
			return true;
		else if 	(className == "F")
			return true;
		else	
			return IsRegistered(className);
	}

	// ===================  Manufacturing methods ============================


	public A Make(G firstArg, int secondArg)
	{
		G out = new G(firstArg, secondArg); // special treatment
		out.initailise(); // special treatment
		out.someAttribute = 42;// special treatment
		return out;
	}


	public B Make(H firstArg, int secondArg, float lastArg)
	{
		H out = new H(firstArg, secondArg); // special treatment
		out.someAttribute += lastArg;// special treatment
		return out;
	}

	public C Make(I firstArg, int secondArg, float lastArg)
	{
		I out = new I(firstArg, secondArg); // special treatment
		out.someAttribute += lastArg;// special treatment
		return out;
	}

	// I hope that you'll find shorter names.
	public J MakeJThreeTimesAndCallARandomClassOnEach(K arg) 
	{
		// here, just some very complex things to do.
		J out = new J();
		out.someAttribute += arg;
		ARandomClass.SomeStaticMethod(out);
		out = new J();
		out.someAttribute += arg;
		ARandomClass.SomeStaticMethod(out);
		out = new J();
		out.someAttribute += arg;
		ARandomClass.SomeStaticMethod(out);
		return out;
	}

	public Object MakeFromString(String className)
	{	
		//here there is D, E and F that needs special treatment
		if 			(className == "D")
		{  
			// random special treatment for D
			D out = new D();
			ARandomClass.SomeStaticMethod(out);
			return out;
		}
		else if 	(className == "E")
		{  
			// random special treatment for E
			D out = new D();
			ARandomClass.SomeStaticMethod(out);
			ARandomClass.SomeStaticAttribute += 3.14;
			return out;
		}
		else if 	(className == "F")
		{  
			// random special treatment for F
			F out = new F();
			FManager.IncrementFCount();
			return out;
		}
		else
		{
			// We know deal with 
			Object potentialClone = Clone(className);		
			if (potentialClone == null) 	
			{
				// Unsupported type, you must log an error here
				// I don't know how log is done at the moment, 
				// but do log this error.
			}
			return potentialClone; 
		}
	}
		

}








/* ============================================================================
 * 	                        Example Factory use
 * ============================================================================
 * 
 * Just an example of what can been done with ExempleFactory
 * A, B, C, D, E, F, G, H, I, J, K, L, and M are random classes. 
 *
 * Author : Martial
 */





// This is a product that will be cloned by ExempleFactory
public class ExempleFactoryProduct implements FactoryProduct
{
	int firstAttr;
	float secondAttr;

	// Constructor
	public ExempleFactoryProduct(float in)
	{
		firstAttr = 0;
		secondAttr = in;
	}

	// Returns an independent copy of the calling object
	public ExempleFactoryProduct Clone()
	{
		// new object, copy attributes, and return.
		// Can't be more straightforward.
		out = new ExempleFactoryProduct(0.0f);
		out.firstAttr = this.firstAttr;
		out.secondAttr = this.secondAttr;
		return out;
	}

	// Gives the class's name in a string, here "ExempleFactoryProduct"
	public String TypeName()
	{
		return "ExempleFactoryProduct";
	}
}



// Fully random class, It just makes use of ExempleFactory 
public class ExempleFactoryUser 
{
	String firstAttr;
	boolean secondAttr;

	ExempleFactory willyWonka;	// Dat factory ^^

	// Will return false in case of error.
	public boolean ASplendidMethodThatUsesTheExempleFactory()
	{
		// allocate our factory so wee can use it.
		willyWonka = new ExempleFactory();


		// ==================== Cloning Exemple ============================


		// that what we want to be cloned each time we want an ExempleFactoryProduct instance.
		ExempleFactoryProduct model = new ExempleFactoryProduct(1.41f);

		// Learn it.
		if (!willyWonka.LearnToClone(model))
		{	
			// Ow noes ! The learning was rejected
			// Be sure to call the static method Humanity.SuicideAll();
			// then log this error, and return false
			return false;
		}

		// Now that we can make ExempleFactoryProduct, let's create tons of them
		List<ExempleFactoryProduct> someExempleFactoryProduct = new ArrayList<ExempleFactoryProduct>();
		for (int i = 0; i < 1000; ++i)
			someExempleFactoryProduct.add((ExempleFactoryProduct) willyWonka.MakeFromString("ExempleFactoryProduct"));
		// all created products now respects secondAttr == 1.41;

		// We can even modify the model, it dose'nt affect the one stored in willyWonka :
		model.firstAttr = 1337;


		for (int i = 0; i < 1000; ++i)
			someExempleFactoryProduct.add((ExempleFactoryProduct) willyWonka.MakeFromString("ExempleFactoryProduct"));
		// and here we still have someExempleFactoryProduct.get(1500).firstAttr == 0; as it was
		// before model was modified.

		// We can change the memorised model : 

		// forget old model
		if (!willyWonka.ForgetHowToClone("ExempleFactoryProduct"))
		{	
			// Ow noes ! The forgeting was rejected
			// Be sure to call the static method Humanity.SuicideAll();
			// then log this error, and return false
			return false;
		}
		// learn the new one
		if (!willyWonka.LearnToClone(model))
		{	
			// Ow noes ! The learning was rejected
			// Be sure to call the static method Humanity.SuicideAll();
			// then log this error, and return false
			return false;
		}


		for (int i = 0; i < 1000; ++i)
			someExempleFactoryProduct.add((ExempleFactoryProduct) willyWonka.MakeFromString("ExempleFactoryProduct"));
		// all created products now respects firstAttr == 1337;



		// ==================== MakeFromString harcoded Exemple ============================


		// D, E and F can be made this way :
		D manufacturedD = willyWonka.MakeFromString("D");
		E manufacturedE = willyWonka.MakeFromString("E");
		F manufacturedF = willyWonka.MakeFromString("F");
		// By this way, you know exactly which type you've got.




		// ==================== Make harcoded Exemple ============================

		// sample args 
		G exempleG = new G();
		H exempleH = new H();
		I exempleI = new I();

		// Let's say A, B and C are specialisations of SuperCapital class.
		SuperCapital[] datSuperArray = 
			{
				willyWonka.Make(exempleG, 156),			// here A is built
				willyWonka.Make(exempleH, 156, 3.14f),	// here B is built
				willyWonka.Make(exempleI, 156, 1.41f)	// here C is built
			};
		// The huge adventage is that you work with SuperCapital without knowing
		// exact types of each object. This way it have no impact to add another type
		// to work with, provided it is a subclass of SuperCapital.




		// ==================== Full complex harcoded Exemple ============================

		// sample args 
		K exempleK = new K();

		// simpliest
		J result = willyWonka.MakeJThreeTimesAndCallARandomClassOnEach(exempleK);
	}
}






